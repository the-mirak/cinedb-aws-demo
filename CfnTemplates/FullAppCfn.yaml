AWSTemplateFormatVersion: '2010-09-09'
Description: |
  CloudFormation template to deploy a VPC, S3 bucket, DynamoDB table, Secrets Manager secret, ALB, and an EC2 instance for the CineDB application.

Parameters:
  VpcCidrBlock:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16

  BucketName:
    Description: Name of the S3 bucket for the movie posters
    Type: String

  DynamoDBTableName:
    Description: Name of the movie DynamoDB table
    Type: String
    Default: cinedb

  SecretName:
    Description: Name of the Secrets Manager secret key for Flask
    Type: String
    Default: flask_ddb_sk

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3a.micro
      - t3.small
      - t3a.small
      - t3.medium
      - t3a.medium

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet3

  # Private Subnets
  PrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1a

  PrivateSubnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1b

  PrivateSubnet2a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2a

  PrivateSubnet2b:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.7.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2b

  PrivateSubnet3a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.8.0/24
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet3a

  PrivateSubnet3b:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.9.0/24
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet3b

  # Route Table Associations
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1a
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation1b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1b
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2a
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2b
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation3a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3a
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation3b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3b
      RouteTableId: !Ref PrivateRouteTable

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref SecretName
      Description: Flask secret key for session management
      SecretString: !Sub '{"SECRET_KEY":"${AWS::StackName}-secret-key"}'

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-ALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-TG
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckPath: /healthz
      HealthCheckPort: 8080
      Matcher:
        HttpCode: '200'
      TargetType: instance

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:s3:::${BucketName}/*
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}*

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 2
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash
            set -e
            echo "Updating system and installing necessary packages..."
            yum update -y
            yum install -y git python3 python3-pip aws-cli
            echo "Cloning the repository..."
            REPO_URL="https://github.com/the-mirak/cinedb-aws-demo.git"
            TARGET_DIR="/home/ec2-user/cinedb"
            git clone --branch v2 $REPO_URL $TARGET_DIR
            if [ ! -d "$TARGET_DIR" ]; then
              echo "Directory $TARGET_DIR does not exist. Git clone might have failed."
              exit 1
            fi
            cd $TARGET_DIR
            echo "Fetching instance metadata..."
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
            AVAILABILITY_ZONE=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/availability-zone)
            REGION=${AWS::Region}
            echo "Creating .env file with environment variables..."
            cat <<EOF > app/.env
            S3_BUCKET=${BucketName}
            DYNAMODB_TABLE=${DynamoDBTableName}
            AWS_REGION=$REGION
            FLASK_SECRET_NAME=${SecretName}
            INSTANCE_ID=$INSTANCE_ID
            AVAILABILITY_ZONE=$AVAILABILITY_ZONE
            EOF
            echo "Environment variables have been written to app/.env"
            echo "Instance ID: $INSTANCE_ID"
            echo "Availability Zone: $AVAILABILITY_ZONE"
            chmod -R 755 app/templates
            pip3 install -r requirements.txt
            pip3 install gunicorn
            chmod +x run.sh
            echo "Waiting for the DynamoDB table to be created..."
            aws dynamodb wait table-exists --table-name ${DynamoDBTableName} --region $REGION
            echo "Populating DynamoDB table with sample data..."
            aws dynamodb put-item --table-name ${DynamoDBTableName} --item '{
              "id": {"S": "1"},
              "title": {"S": "Celestial Nomads"},
              "synopsis": {"S": "In a distant galaxy, a group of interstellar travelers embarks on a journey to find a new home, facing unknown dangers and forging new alliances along the way."},
              "rating": {"N": "9.3"},
              "poster": {"S": "https://${BucketName}.s3.amazonaws.com/CelestialNomads.png"}
            }' --region $REGION
            echo "Uploading image to S3 bucket..."
            aws s3 cp $TARGET_DIR/lambda/Pictures/CelestialNomads.png s3://${BucketName}/CelestialNomads.png --region $REGION
            GUNICORN_PATH=$(which gunicorn)
            echo "Creating systemd service for the Flask application..."
            cat <<EOF > /etc/systemd/system/cinedb-app.service
            [Unit]
            Description=CineDB Flask Application
            After=network.target
            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=$TARGET_DIR
            ExecStart=$GUNICORN_PATH -b 0.0.0.0:8080 app:app
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOF
            echo "Starting the Flask application service..."
            systemctl daemon-reload
            systemctl enable cinedb-app.service
            systemctl start cinedb-app.service
            echo "Signaling CloudFormation that the instance setup is complete..."
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref ALBTargetGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3Bucket

  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref DynamoDBTable

  SecretName:
    Description: Name of the Secrets Manager secret
    Value: !Ref Secret

  ALBURL:
    Description: URL of the ALB
    Value: !GetAtt ALB.DNSName
